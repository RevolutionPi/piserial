#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright: 2021-2022 KUNBUS GmbH
#
# resize root partition to fit the eMMC if it has more than 3.9 GByte;
# reset dtoverlay, password of user pi, machine-id, hostname, FQDN and
# MAC address of a RevPi to factory defaults

. /usr/share/revpi/revpi-functions

full_devicetype_list="compact|connect|core|flat|connect-se"	# all suported devices
if has-hat-eeprom; then
	# The device is equipped with HAT EEPROM
	with_hat_eeprom=true

	# Get the serial number from device tree according to document:
	# https://github.com/RevolutionPi/revpi-hat-eeprom/blob/master/docs/RevPi-HAT-EEPROM-Format.md#1-serial
	ser=$(cat /proc/device-tree/hat/custom_1)
else
	with_hat_eeprom=false

	ovl="$1"
	ser="$2"
	mac="$3"
	mac="${mac,,}"		# downcase
	mac="${mac//-/}"	# remove dashes
	mac="${mac//:/}"	# remove colons

	witheth1_devicetype_list="compact|connect|flat|connect-se"	# devices with "eth1"

	if [ "$#" != 3 ] ||
	! [[ "$ovl" =~ ^($full_devicetype_list)$ ]] ||
	! [[ "$ser" =~ ^[0-9]+$ ]] ||
	! [[ "$mac" =~ ^[0-9a-f]{12}$ ]] ; then
		echo -e 1>&2 "Usage: $(basename "$0") <$full_devicetype_list> <serial> <mac addr>\n(see front plate)"
		exit 1
	fi

	if [ "$ovl" = "core" ]; then
		if cm1-detection; then
			echo "Compute Module 1 has been detected, core-cm1-overlay will be used"
			echo "automatically."
			ovl="core-cm1"
		fi
	fi
fi
if [ "$(/usr/bin/id -u)" != 0 ] ; then
	echo 1>&2 "This program requires root access"
	exit 1
fi

# resize root partition
dev=mmcblk0
total_size="$(/bin/cat /sys/block/$dev/size)"
last_part="$(cd /dev || exit 1 ; /bin/ls ${dev}p* | /usr/bin/tail -1)"
last_part_start="$(/bin/cat "/sys/block/$dev/$last_part/start")"
last_part_size="$(/bin/cat "/sys/block/$dev/$last_part/size")"
last_part_max="$(("$total_size" - "$last_part_start"))"
if [ "$last_part_size" -lt "$last_part_max" ] ; then
	parted "/dev/$dev" resizepart 2 $((total_size-1))s
	/sbin/partprobe "/dev/$dev"
	/sbin/resize2fs "/dev/$last_part"
fi

/bin/sed --follow-symlinks -r -i -e "/^dtoverlay=revpi-($full_devicetype_list)/d" /boot/config.txt
if ! "$with_hat_eeprom"; then
	echo "dtoverlay=revpi-$ovl" >> /boot/config.txt
	/usr/bin/dtoverlay "revpi-$ovl"
	/bin/cp "/boot/overlays/revpi-$ovl-dt-blob.dtbo" /boot/dt-blob.bin 2>/dev/null
fi

piserial="/usr/sbin/piSerial"
if ! "$with_hat_eeprom"; then
	if [ "$ovl" == flat ]; then
		# wait for dtoverlay revpi-flat, and tpm modules get probed
		wait_time=60
		printf "Wait for tpm chip to become ready. Fail if the chip is not available after $wait_time seconds"
		for (( i=1; i<=wait_time; i++ ))
		do
			if [ "$i" = "$wait_time" ]; then
				echo "timeout!"
				echo "The factory reset is stopped here!"
				exit 1
			fi
			if [ -c /dev/tpm0 ]; then
				echo " ok"
				break
			fi
			printf '%c' '.'
			sleep 1
		done
	fi
fi

pw=$($piserial -p)
echo -e "Password:\t$pw"
echo "pi:${pw}" | chpasswd

umount /etc/machine-id 2>/dev/null
$piserial -s | /usr/bin/sha256sum | cut -c1-32 > /etc/machine-id

hostname="RevPi$ser"
echo -e "Hostname:\t$hostname"
/bin/sed --follow-symlinks -r -i -e "s/^(127\.0\.1\.1[[:blank:]]+).*/\1$hostname/" /etc/hosts
echo "$hostname" > /etc/hostname
/bin/hostname "$hostname"

# remove existing entries before writing new ones
/bin/sed --follow-symlinks -r -i -e "/^dtparam=eth[0-9]_mac_/d" /boot/config.txt
if ! "$with_hat_eeprom"; then
	mac_hi="${mac:0:2}${mac:2:2}${mac:4:2}${mac:6:2}"
	mac_lo="${mac:8:2}${mac:10:2}"
	echo -e "MAC Address eth0:\t$mac_hi$mac_lo"
	echo "dtparam=eth0_mac_hi=0x${mac_hi}" >> /boot/config.txt
	echo "dtparam=eth0_mac_lo=0x${mac_lo}" >> /boot/config.txt

	if [[ "$ovl" =~ ^($witheth1_devicetype_list)$ ]] ; then
		mac_lo1=$(( 0x${mac_lo} + 1))
		mac_lo1=$(/usr/bin/printf "%.4hx" "${mac_lo1}")
		echo -e "MAC Address eth1:\t$mac_hi$mac_lo1"
		echo "dtparam=eth1_mac_hi=0x${mac_hi}" >> /boot/config.txt
		echo "dtparam=eth1_mac_lo=0x${mac_lo1}" >> /boot/config.txt
		if [[ "$ovl" =~ ^compact$ ]] ; then
			/usr/sbin/ks8851-set-mac eth1 "$mac_hi$mac_lo1"
		fi
	fi

	if [[ "$ovl" =~ ^flat$ ]] ; then
		ln -s /lib/systemd/system/hdmi-disable.service /etc/systemd/system/multi-user.target.wants/hdmi-disable.service
		systemctl start hdmi-disable
		echo "HDMI disabled. Use 'sudo systemctl disable hdmi-disable' and reboot to reenable HDMI."
	fi

	echo "Reboot to activate the MAC Address"
fi
echo "Be sure to write down the password if you have lost the sticker"
echo "on your RevPi!"

# skip /etc/profile.d/revpi-factory-reset.sh on future logins
true > /home/pi/.revpi-factory-reset
# skip /etc/profile.d/sshpasswd.sh on future logins
/usr/bin/sudo /bin/rm -f /run/sshwarn
